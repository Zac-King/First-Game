///////////////////////////////////////////////////////////////////////////////////////////////////////
//  Author  : Zac King  ///////////////////////////////////////////////////////////////////////////////
//  Origin  : Marco Salamone  /////////////////////////////////////////////////////////////////////////
//  Date    : 24/10/2014  /////////////////////////////////////////////////////////////////////////////
//  Purpose : Handles Sprites for the objects. (Creation/Deletion) in one place  //////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////

#include "Assets.h"

// Assets Constructor  ////////////////////////////////////////////////////////////////////////////////
Assets::Assets()
{
	// loading all sprites
	for (int i = 0; i < g_maxSprites; ++i) 
	{
		sprites[i] = nullptr;
		if (i < eSize) assoc[i] = nullptr;
	}
	nSprites = 0;	
}
// Get Sprite Asset  //////////////////////////////////////////////////////////////////////////////////
unsigned Assets::Get(eSpriteFlag s)
{
	return *assoc[s];
}
// Load Sprite  ///////////////////////////////////////////////////////////////////////////////////////
unsigned Assets::LoadSprite(char *path, int w, int h, eSpriteFlag s, bool center)
{
	// Places Sprite to asset so it can be easily retreived later
	if (nSprites < 64)
	{
		unsigned *t = new unsigned(CreateSprite(path, w, h, center));
		sprites[nSprites++] = t;  
		// s= the sprite flag
		if (s != eNone)	assoc[s] = t; 			
		// *t = the sprite
		return *t;  
	}
	return 0;
}
// De-Constructor  ////////////////////////////////////////////////////////////////////////////////////
Assets::~Assets()
{
	// Runs through all assests and closes them
	for (int i = 0; i < g_maxSprites; ++i)
		if (sprites[i])	
		{
			DestroySprite(*sprites[i]);						
			delete sprites[i];
		}
}